// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("TESTING_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  decks         Deck[]
  votes         DeckVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Deck {
  id            String     @id @default(cuid())
  deckName      String     @default("New Deck")
  generalId     Int
  code          String
  description   String?		 @db.VarChar(150)
  deckType      String?
  isPrivate     Boolean    @default(false)
  minionCount   Int
  artifactCount Int
  spellCount    Int
  faction       Int
	factionCardCount Int		 @default(15)
	neutralCardCount Int		 @default(15)
  creatorId     String
  creator       User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  votes         DeckVote[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([creatorId])
}

model DeckVote {
  id        String   @id @default(cuid())
  deckId    String
  userId    String
  vote      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deckId, userId])
  @@index([deckId, userId])
}
